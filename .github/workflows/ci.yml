name: ci

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  actions: read
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  main:
    runs-on: ubuntu-latest
    env:
      NX_CLOUD: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Connect your workspace on nx.app and uncomment this to enable task distribution.
      # The "--stop-agents-after" is optional, but allows idle agents to shut down once the "build" targets have been requested
      # - run: npx nx-cloud start-ci-run --distribute-on="5 linux-medium-js" --stop-agents-after="build"

      - uses: actions/setup-node@v4
        with:
          node-version: 20
       
      - name: install dependencies
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: npx nx-cloud record -- echo Hello World
      # - run: npx nx affected -t lint test build

      - name: calculate version-autopilot
        id: version-autopilot
        uses: ./apps/version-autopilot
        with:
          major: 0
          minor: 0
          shift: 50 # remove if this is a brand new application. Otherwise, use this to match your current version.

      - name: version-autopilot output
        run: |
          echo "github.run_number: ${{ github.run_number }}"
          echo "version_autopilot_string_recommended: ${{ steps.version-autopilot.outputs.version_autopilot_string_recommended }}"
          echo "version_autopilot_string: ${{ steps.version-autopilot.outputs.version_autopilot_string }}"
          echo "version_autopilot_code: ${{ steps.version-autopilot.outputs.version_autopilot_code }}"

      - name: calculate pragma
        id: pragma
        uses: ./apps/pragma
        with:
          variables: |
            lint-appname-ui = 'skip'
            force = false
            deploy = "${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/prod' }}"

      - name: calculate affected
        id: affected
        uses: ./apps/affected
        with:
          rules: |
            peggy-parser: 'apps/affected/src/parser.peggy';
            peggy-parser-checkIf-incomplete: peggy-parser AND (!'apps/affected/src/parser.ts' OR !'apps/e2e/src/affected/parser.spec.ts');
            ci: '.github/workflows/ci.yml';
            <affected>: './apps/affected/**' './dist/apps/affected/**';
            <version-autopilot>: './apps/version-autopilot/**' './dist/apps/version-autopilot/**';
            <pragma>: './apps/pragma/**' './dist/apps/pragma/**';
            e2e: ('./e2e/**' ci pragma affected version-autopilot) EXCEPT ('**/*.md');

      - name: incomplete parser changes
        if: ${{ !failure() && !cancelled() && fromJson(steps.affected.outputs.affected).changes.peggy-parser-checkIf-incomplete }}
        run: |
          echo "Missing parser.ts or parser.spec.ts in changeset."
          exit 1

      - name: check if parser changes are incomplete
        if: ${{ !failure() && !cancelled() && fromJson(steps.affected.outputs.affected).changes.peggy-parser }}
        run: |
          pnpm apps:affected:generate-parser
          sed -i '1i /* eslint-disable @typescript-eslint/ban-ts-comment */\n// @ts-nocheck' apps/affected/src/parser.ts
          git diff --exit-code -- ./

      - name: e2e tests
        if: ${{ !failure() && !cancelled() && fromJson(steps.affected.outputs.affected).changes.e2e }}
        run: npx nx run e2e:e2e

      - name: build affected
        if: ${{ !failure() && !cancelled() && fromJson(steps.affected.outputs.affected).changes.affected }}
        run: npx nx run affected:build:production

      - name: build version-autopilot
        if: ${{ !failure() && !cancelled() && fromJson(steps.affected.outputs.affected).changes.version-autopilot }}
        run: npx nx run version-autopilot:build:production

      - name: build pragma
        if: ${{ !failure() && !cancelled() && fromJson(steps.affected.outputs.affected).changes.pragma }}
        run: npx nx run pragma:build:production

      - name: assert dist is deterministic
        run: git diff --exit-code -- ./dist

      - name: debug
        if: ${{ failure() && !cancelled() }}
        shell: bash
        run: |
          echo ''
          echo 'inputs:'
          jq -r . <<EOF
          ${{ toJson(inputs) }}
          EOF
          echo '============================'
          echo 'github:'
          jq -r . <<EOF
          ${{ toJson(github) }}
          EOF
          echo '============================'
          printenv