name: ci

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  actions: read
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  main:
    runs-on: ubuntu-latest
    env:
      NX_CLOUD: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Connect your workspace on nx.app and uncomment this to enable task distribution.
      # The "--stop-agents-after" is optional, but allows idle agents to shut down once the "build" targets have been requested
      # - run: npx nx-cloud start-ci-run --distribute-on="5 linux-medium-js" --stop-agents-after="build"

      - uses: actions/setup-node@v4
        with:
          node-version: 20
       
      - name: install dependencies
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: npx nx-cloud record -- echo Hello World
      # - run: npx nx affected -t lint test build

      - name: example affected
        id: affected
        uses: ./dist/apps/affected
        with:
          rules: |
            ci: './github/workflows/ci.yml';
            [affected](./apps/affected): './apps/affected/**' './dist/apps/affected/**' ci;
            [version-autopilot](./apps/version-autopilot): './apps/version-autopilot/**' './dist/apps/version-autopilot/**' ci;
            e2e: './e2e/**' affected version-autopilot !'**/*.md';

      - name: example affected output
        run: |
          set -ex
          echo "changes: ${{ steps.affected.outputs.affected.changes }}"
          echo "shas: ${{ steps.affected.outputs.affected.shas }}"
          echo "recommended_imagetags: ${{ steps.affected.outputs.affected.recommended_imagetags }}"

          # You can use env values for naming complex expressions.
          AFFECTED_AFFECTED=$(echo '${{ steps.affected.outputs.affected.changes }}' | jq -r .affected)
          VERSION_AUTOPILOT_AFFECTED=$(echo '${{ steps.affected.outputs.affected.changes }}' | jq -r '.["version-autopilot"]')

          echo "AFFECTED_AFFECTED=$AFFECTED_AFFECTED" >> $GITHUB_ENV
          echo "VERSION_AUTOPILOT_AFFECTED=$VERSION_AUTOPILOT_AFFECTED" >> $GITHUB_ENV

      - name: e2e tests
        if: ${{ fromJson(steps.affected.outputs.affected.changes).e2e }}
        run: npx nx run e2e:e2e

      - name: build affected
        if: ${{ fromJson(steps.affected.outputs.affected.changes).affected }}
        run: npx nx run affected:build:production

      - name: build version-autopilot
        if: ${{ fromJson(steps.affected.outputs.affected.changes).version-autopilot }}
        run: npx nx run version-autopilot:build:production

      - name: assert dist is deterministic
        run: git diff --exit-code -- ./dist

      - name: example version-autopilot
        id: version-autopilot
        uses: ./dist/apps/version-autopilot
        with:
          major: 0
          minor: 0
          shift: 50 # remove if this is a brand new application. Otherwise, use this to match your current version.

      - name: example version-autopilot output
        run: |
          echo "github.run_number: ${{ github.run_number }}"
          echo "version_autopilot_string_recommended: ${{ steps.version-autopilot.outputs.version_autopilot_string_recommended }}"
          echo "version_autopilot_string: ${{ steps.version-autopilot.outputs.version_autopilot_string }}"
          echo "version_autopilot_code: ${{ steps.version-autopilot.outputs.version_autopilot_code }}"
