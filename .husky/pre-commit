set -e

# Nx provides built-in commands to run tasks for affected projects:
# - Run tests for affected projects:
#   pnpm nx affected --target=test
# - Run linting for affected projects:
#   pnpm nx affected --target=lint
#
# This script demonstrates how to manually calculate affected projects without relying on Nx.
# Our rule-based approach standardizes the process, making it adaptable to diverse tech stacks and monorepo structures.


required_tools=("act" "jq" "unzip" "npx")

check_command() {
  if ! command -v "$1" &>/dev/null; then
    echo "Notice: $1 is not installed. Skipping further processing."
    exit 0
  else
    echo "$1 is already installed."
  fi
}

# Check each tool
for tool in "${required_tools[@]}"; do
  check_command "$tool"
done

echo "All required tools are installed. Proceeding..."


rm -rf .husky-ext-act/.artifacts/1/ || true

act pull_request -W .husky-ext-act/act.yml -j calculate  -e .husky-ext-act/act.payload.json -s GITHUB_TOKEN="fakeToken123"  --action-offline-mode --artifact-server-path .husky-ext-act/.artifacts
unzip .husky-ext-act/.artifacts/1/affected/affected.zip -d .husky-ext-act/.artifacts/1/affected/

if [[ ! -f .husky-ext-act/.artifacts/1/affected/affected-changes.json ]]; then
  echo "File does not exist: .husky-ext-act/.artifacts/1/affected/affected-changes.json"
  exit 1
fi

# Check properties
affected=$(jq '.affected' .husky-ext-act/.artifacts/1/affected/affected-changes.json)
pragma=$(jq '.pragma' .husky-ext-act/.artifacts/1/affected/affected-changes.json)
version_autopilot=$(jq '.["version-autopilot"]' .husky-ext-act/.artifacts/1/affected/affected-changes.json)

if [[ $affected == "true" ]]; then
  npx nx run affected:lint
  npx nx run affected:test
  npx nx run affected:build:production
fi
if [[ $pragma == "true" ]]; then
  npx nx run pragma:lint
  npx nx run pragma:test
  npx nx run pragma:build:production
fi
if [[ $version_autopilot == "true" ]]; then
  npx nx run version-autopilot:lint
  npx nx run version-autopilot:test
  npx nx run version-autopilot:build:production
fi